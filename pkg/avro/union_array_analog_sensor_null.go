// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCE:
 *     egtspackage.avsc
 */

package avro

import (
	"github.com/actgardner/gogen-avro/vm/types"
)

type UnionArrayAnalogSensorNull struct {
	ArrayAnalogSensor []*AnalogSensor
	Null              *types.NullVal
	UnionType         UnionArrayAnalogSensorNullTypeEnum
}

type UnionArrayAnalogSensorNullTypeEnum int

const (
	UnionArrayAnalogSensorNullTypeEnumArrayAnalogSensor UnionArrayAnalogSensorNullTypeEnum = 0
	UnionArrayAnalogSensorNullTypeEnumNull              UnionArrayAnalogSensorNullTypeEnum = 1
)

func NewUnionArrayAnalogSensorNull() *UnionArrayAnalogSensorNull {
	return &UnionArrayAnalogSensorNull{}
}

func (_ *UnionArrayAnalogSensorNull) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionArrayAnalogSensorNull) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionArrayAnalogSensorNull) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionArrayAnalogSensorNull) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionArrayAnalogSensorNull) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionArrayAnalogSensorNull) SetString(v string)  { panic("Unsupported operation") }
func (r *UnionArrayAnalogSensorNull) SetLong(v int64) {
	r.UnionType = (UnionArrayAnalogSensorNullTypeEnum)(v)
}
func (r *UnionArrayAnalogSensorNull) Get(i int) types.Field {
	switch i {
	case 0:
		r.ArrayAnalogSensor = make([]*AnalogSensor, 0)
		return (*ArrayAnalogSensorWrapper)(&r.ArrayAnalogSensor)
		break
	case 1:
		return r.Null
		break

	}
	panic("Unknown field index")
}
func (_ *UnionArrayAnalogSensorNull) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionArrayAnalogSensorNull) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionArrayAnalogSensorNull) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionArrayAnalogSensorNull) Finalize()                        {}
