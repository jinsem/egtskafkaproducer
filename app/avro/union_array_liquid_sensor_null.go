// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCE:
 *     egtspackage.avsc
 */

package avro

import (
	"github.com/actgardner/gogen-avro/vm/types"
)

type UnionArrayLiquidSensorNull struct {
	ArrayLiquidSensor []*LiquidSensor
	Null              *types.NullVal
	UnionType         UnionArrayLiquidSensorNullTypeEnum
}

type UnionArrayLiquidSensorNullTypeEnum int

const (
	UnionArrayLiquidSensorNullTypeEnumArrayLiquidSensor UnionArrayLiquidSensorNullTypeEnum = 0
	UnionArrayLiquidSensorNullTypeEnumNull              UnionArrayLiquidSensorNullTypeEnum = 1
)

func NewUnionArrayLiquidSensorNull() *UnionArrayLiquidSensorNull {
	return &UnionArrayLiquidSensorNull{}
}

func (_ *UnionArrayLiquidSensorNull) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionArrayLiquidSensorNull) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionArrayLiquidSensorNull) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionArrayLiquidSensorNull) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionArrayLiquidSensorNull) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionArrayLiquidSensorNull) SetString(v string)  { panic("Unsupported operation") }
func (r *UnionArrayLiquidSensorNull) SetLong(v int64) {
	r.UnionType = (UnionArrayLiquidSensorNullTypeEnum)(v)
}
func (r *UnionArrayLiquidSensorNull) Get(i int) types.Field {
	switch i {
	case 0:
		r.ArrayLiquidSensor = make([]*LiquidSensor, 0)
		return (*ArrayLiquidSensorWrapper)(&r.ArrayLiquidSensor)
		break
	case 1:
		return r.Null
		break

	}
	panic("Unknown field index")
}
func (_ *UnionArrayLiquidSensorNull) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionArrayLiquidSensorNull) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionArrayLiquidSensorNull) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionArrayLiquidSensorNull) Finalize()                        {}
